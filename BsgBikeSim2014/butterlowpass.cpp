#include "butterlowpass.h"

/*
 * This file is autogenerated. Please do not modify directly as changes may be
 * overwritten.
 */

namespace {
    // Butter lowpass filter
    // order: 2
    // cutoff freq: 4.0
    // sample freq: 200.0
    const double a[] = { 1.0,-1.8226949252,0.837181651256 };
    const double b[] = { 0.00362168151493,0.00724336302986,0.00362168151493 };
} // namespace

ButterLowpass::ButterLowpass(): _x{0.0f}, _y{0.0f}, _n{0} { }

float ButterLowpass::filter(float sample) {
    _x[_n] = sample;
    _y[_n] = b[0]*_x[_n];
    for (int i = 1; i < _size; ++i) {
        _y[_n] += b[i]*_x[(_n - i + _size) % _size]
            - a[i]*_y[(_n - i + _size) % _size];
    }

    float result = _y[_n];
    _n = (_n + 1) % _size;
    return result;
}